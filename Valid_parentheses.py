# leetcode no.20
class Solution:
    def isValid(self, s: str) -> bool:
        pair = {
            ')': '(',
            ']': '[',
            '}': '{'
        }
        opener = "({["
        stack = []

        for char in s:
            if char in opener:
                stack.append(char)

            else:
                if not stack:
                    return False

                top = stack.pop()
                if pair[char] != top:
                    return False

        return not stack
# 유효한 괄호 찾기
#괄호는 열린 순서에 따라 닫히는 순서는 반대로 되어야만 유효하다 그렇기 때문에 그 조건을 이용해서 비교하여 괄호가 유효한지 알 수 있다
# 조건을 찾아보기전 먼저 괄호들의 쌍을 적어서 딕셔너리화 해준다, 여기서 주의할점은 항상  오른쪽으로 열린 괄호가 먼저와야 하기 때문에 오른쪽으로 열린 괄호는 스택에 쌓이고
# 닫히는 괄호가 for문에 들어가서 stack 탑에 있는 값과 비교될거기 때문에 key값으로 닫힌 괄호를 value 값으로 열린 괄호를 세팅해줘야 한다
# 그 다음 열리는 괄호와 닫히는 괄호를 구분하기 위해 opener로 열린 괄호들만 모아놓는다
#스택에 여러값이 순서대로 들어오고 나가기 때문에 stack을 리스트로 만들어준다
# 이제 입력 받은 값을 for문을 통해 한글자 한글자 보며 조건을 따져준다
# 1. 괄호가 열린 괄호인지 확인하기 -> 맞다면 스택에 쌓아준다 -> 아니면 스택에 값이 존재하는지(오프너가 사전에 스택에 들어갔는지)를 찾아보고 스택이 비었다면 false처리
# 2. 오프너면 계속 스택에 넣어주다가 오프너가 아닌 값이 나왔을때 스택에 값이 존재하는지 확인해보고 존재한다면 스택의 가장 위에 있는 값을 top으로 빼네어서
#  key값을 통해  pair가 맞는지 보고 맞지 않는다면 (괄호 순서가 달라 유효하지 않음) false 처리 -> 맞다면 유효하므로 for문을 더 돌아준다
# 모든 for문이 다 끝나고 stack에 값이 존재하는지 아닌지를 리턴으로 판단하여 열린 괄호와 닫힌 괄호의 개수가 딱 맞아 떨어지는지 판별한다.